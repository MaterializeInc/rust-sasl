.\" Man page generated from reStructuredText.
.
.TH "SASL_CLIENT_STEP" "3" "February 18, 2022" "2.1.28" "Cyrus SASL"
.SH NAME
sasl_client_step \- Cyrus SASL documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
.nf
#include <sasl/sasl.h>

int sasl_client_step(sasl_conn_t *conn,
               const char *serverin,
               unsigned serverinlen,
               sasl_interact_t ** prompt_need,
               const char ** clientout,
               unsigned * clientoutlen);
.fi
.SH DESCRIPTION
.INDENT 0.0
.TP
.B int sasl_client_step(sasl_conn_t *conn,
.TP
.B const char *serverin,
.TP
.B unsigned serverinlen,
.TP
.B sasl_interact_t ** prompt_need,
.TP
.B const char ** clientout,
.TP
.B unsigned * clientoutlen);
\fBsasl_client_step()\fP performs a step in  the  authentication negotiation.  It
returns \fBSASL_OK\fP if the whole negotiation is successful and
\fBSASL_CONTINUE\fP if
this step is ok but  at least  one more step is needed. A client should not
assume an authentication negotiation is successful  just  because the
server  signaled  success  via  protocol (i.e. if the server  said  “.  OK
Authentication  succeeded”  in  IMAP, sasl_client_step should still be called
one more time with a \fIserverinlen\fP of zero.
.sp
If \fBSASL_INTERACT\fP is returned the library needs some values
to  be  filled  in  before it can proceed. \fIThe prompt_need\fP
structure will be filled in with requests. The application
should  fulfill  these requests and call sasl_client_start
again with identical parameters (the \fIprompt_need\fP parameter
will  be  the  same pointer as before but filled in by the
application).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBconn\fP – is the SASL connection context
.IP \(bu 2
\fBserverin\fP – is the data given by the server (decoded  if  the
protocol encodes requests sent over the wire)
.IP \(bu 2
\fBserverinlen\fP – is the length of \fIserverin\fP
.IP \(bu 2
\fBclientout\fP – is created. It is  the  initial
client  response  to  send to the server. It is the job of
the client to send it over the network to the server.  Any
protocol  specific encoding (such as base64 encoding) nec‐
essary needs to be done by the client.
.IP \(bu 2
\fBclientoutlen\fP – length of \fIclientout\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.SH RETURN VALUE
.sp
SASL  callback  functions should return SASL return codes.
See sasl.h for a complete list. \fBSASL_CONTINUE\fP indicates success
and that there are more steps needed in the authentication. \fBSASL_OK\fP
indicates that the authentication is complete.
.sp
Other return codes indicate errors and should either be handled or the authentication
session should be quit.
.SH SEE ALSO
.sp
\fI\%RFC 4422\fP,:saslman:\fIsasl(3)\fP, sasl_callbacks(3),
sasl_client_init(3), sasl_client_new(3),
sasl_client_start(3), sasl_errors(3)
.SH AUTHOR
The Cyrus Team
.SH COPYRIGHT
1993-2016, The Cyrus Team
.\" Generated by docutils manpage writer.
.
