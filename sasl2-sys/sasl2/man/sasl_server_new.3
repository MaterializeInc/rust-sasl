.\" Man page generated from reStructuredText.
.
.TH "SASL_SERVER_NEW" "3" "February 18, 2022" "2.1.28" "Cyrus SASL"
.SH NAME
sasl_server_new \- Cyrus SASL documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
.nf
#include <sasl/sasl.h>

int sasl_server_new(const char *service,
                const char *serverFQDN,
                const char *user_realm,
                const char *iplocalport,
                const char *ipremoteport,
                const sasl_callback_t *callbacks,
                unsigned flags,
                sasl_conn_t ** pconn);
.fi
.SH DESCRIPTION
.INDENT 0.0
.TP
.B int sasl_server_new(const char *service,
.TP
.B const char *serverFQDN,
.TP
.B const char *user_realm,
.TP
.B const char *iplocalport,
.TP
.B const char *ipremoteport,
.TP
.B const sasl_callback_t *callbacks,
.TP
.B unsigned flags,
.TP
.B sasl_conn_t ** pconn);
\fBsasl_server_new()\fP creates a new SASL context. This context will  be
used  for  all SASL calls for one connection. It handles both authentication
and integrity/encryption  layers after authentication.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBservice\fP – is the registered name of the service (usually the
protocol name) using SASL (e.g. “imap”).
.IP \(bu 2
\fBserverFQDN\fP – is the  fully  qualified  server  domain  name.
NULL  means  use gethostname().  This is useful for multi\-homed servers.
.IP \(bu 2
\fBuser_realm\fP – is the domain of the user agent. This  is  usually
not necessary (NULL is default)
.IP \(bu 2
\fBiplocalport\fP – 
.sp
is  the  IP and port of the local side of the
connection, or NULL.  If iplocalport is NULL it will  disable mechanisms
that require IP address information.  This strings  must  be  in  one
of the following formats:
.INDENT 2.0
.IP \(bu 2
”a.b.c.d;port”  (IPv4),
.IP \(bu 2
”e:f:g:h:i:j:k:l;port” (IPv6), or
.IP \(bu 2
”e:f:g:h:i:j:a.b.c.d;port” (IPv6)
.UNINDENT

.IP \(bu 2
\fBipremoteport\fP – is the IP and port of the remote side of  the
connection, or NULL (see iplocalport)
.IP \(bu 2
\fBflags\fP – are connection flags (see below)
.IP \(bu 2
\fBpconn\fP – is a pointer to the connection context allocated by
the library. This structure will be used  for  all  future
SASL calls for this connection.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Connection flags
.sp
Flags that may be passed to \fBsasl_server_new()\fP:
.INDENT 0.0
.IP \(bu 2
\fISASL_SUCCESS_DATA\fP: The protocol supports a server‐last send
.IP \(bu 2
.INDENT 2.0
.TP
.B \fISASL_NEED_PROXY\fP: Force the use of  a  mechanism  that  supports  an
authorization  id  that  is not the authentication id.
.UNINDENT
.UNINDENT
.SH RETURN VALUE
.sp
SASL  callback  functions should return SASL return codes.
See sasl.h for a complete list. \fBSASL_OK\fP indicates success.
.sp
Other return codes indicate errors and should either be handled or the
authentication session should be quit.
.SH SEE ALSO
.sp
\fI\%RFC 4422\fP,:saslman:\fIsasl(3)\fP, sasl_server_init(3),
sasl_server_start(3), sasl_server_step(3),
sasl_setprop(3), sasl_errors(3)
.SH AUTHOR
The Cyrus Team
.SH COPYRIGHT
1993-2016, The Cyrus Team
.\" Generated by docutils manpage writer.
.
